% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PersistenceLandscape.r
\docType{class}
\name{PersistenceLandscape}
\alias{PersistenceLandscape}
\alias{Rcpp_PersistenceLandscape}
\alias{PersistenceLandscape-class}
\alias{Rcpp_PersistenceLandscape-class}
\alias{summary.Rcpp_PersistenceLandscape}
\alias{print.summary.Rcpp_PersistenceLandscape}
\alias{as.vector.Rcpp_PersistenceLandscape}
\alias{as.data.frame.Rcpp_PersistenceLandscape}
\title{Exported C++ Class 'PersistenceLandscape'}
\usage{
\method{summary}{Rcpp_PersistenceLandscape}(object, ...)

\method{print}{summary.Rcpp_PersistenceLandscape}(x, digits = max(1L, getOption("digits") - 3L), ...)

\method{as.vector}{Rcpp_PersistenceLandscape}(x, mode = "any")

\method{as.data.frame}{Rcpp_PersistenceLandscape}(x, row.names = NULL, optional = FALSE, exact = FALSE, ...)
}
\arguments{
\item{object}{an object for which a summary is desired.}

\item{...}{Additional arguments; currently ignored.}

\item{x}{an \R object.}

\item{digits}{integer, used for number formatting with
    \code{\link[base]{signif}()} (for \code{summary.default}) or
    \code{\link[base]{format}()} (for \code{summary.data.frame}).  In
    \code{summary.default}, if not specified (i.e.,
    \code{\link[base]{missing}(.)}), \code{signif()} will \emph{not} be called
    anymore (since \R >= 3.4.0, where the default has been changed to
    only round in the \code{print} and \code{format} methods).}

\item{mode}{character string naming an atomic mode or
    \code{"list"} or \code{"expression"} or (except for \code{vector})
    \code{"any"}.  Currently, \code{is.vector()} allows any type (see
    \code{\link[base]{typeof}}) for \code{mode}, and when mode is not
    \code{"any"}, \code{is.vector(x, mode)} is almost the same as
    \code{typeof(x) == mode}.}

\item{row.names}{\code{NULL} or a character vector giving the row
    names for the data frame.  Missing values are not allowed.}

\item{optional}{logical. If \code{TRUE}, setting row names and
    converting column names (to syntactic names: see
    \code{\link[base]{make.names}}) is optional.  Note that all of \R's
    \pkg{base} package \code{as.data.frame()} methods use
    \code{optional} only for column names treatment, basically with the
    meaning of \code{\link[base]{data.frame}(*, check.names = !optional)}.
    See also the \code{make.names} argument of the \code{matrix} method.}

\item{exact}{Whether to export the exact or a discrete (default)
representation; if \code{TRUE} but \code{x} has a discrete representation, then
ignored with a warning.}
}
\description{
Export, and create and manipulate objects of, the
'PersistenceLandscape' C++ class.
}
\details{
The C++ class 'PersistenceLandscape' is exposed as the S4 class
'Rcpp_PersistenceLandscape' via the \code{RCPP_MODULE()} macro provided by
\strong{\link[Rcpp:Rcpp-package]{Rcpp}}. See
\url{https://github.com/r-pkg-examples/rcpp-modules-student} for an
introduction. New objects should be created from persistence data
(diagrams) using \code{\link[=landscape]{landscape()}}.
}
\examples{
# constructor
pl1 <- new(PersistenceLandscape,
           diagram = matrix(c(0,1, 0,2), nrow = 2L, ncol = 2L, byrow = TRUE),
           exact = TRUE,
           min_x = 0, max_x = 3,
           by = 0.1, max_y = 100)
summary(pl1)
pl2 <- new(PersistenceLandscape,
           diagram = matrix(c(0,1, 0,2), nrow = 2L, ncol = 2L, byrow = TRUE),
           exact = FALSE,
           min_x = -.25, max_x = 5,
           by = 0.1, max_y = 100)
summary(pl2)

# getters
pl1$getInternal()
pl1$getExact()
pl1$getDiscrete()
pl2$getInternal()
try(pl2$getExact())
pl2$getDiscrete()
}
