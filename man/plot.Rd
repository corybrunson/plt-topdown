% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot.r, R/show.r
\name{plot}
\alias{plot}
\alias{plot,Rcpp_PersistenceLandscape-method}
\alias{show,Rcpp_PersistenceLandscape-method}
\title{Plot Method for Persistence Landscapes.}
\usage{
\S4method{plot}{Rcpp_PersistenceLandscape}(
  x,
  replace_inf = NULL,
  n_levels = NULL,
  palette = "viridis",
  alpha = NULL,
  rev = FALSE,
  ...,
  silent = TRUE
)

\S4method{show}{Rcpp_PersistenceLandscape}(object)
}
\arguments{
\item{x}{A persistence landscape object of class 'Rcpp_PersistenceLandscape'.}

\item{replace_inf}{When using an exact representation of a persistence
landscape, infinite values can appear. If not \code{NULL}, this value will
replace \code{Inf} (and its negative will replace \code{-Inf}) in the plot.}

\item{n_levels}{Integer; number of levels to plot. If \code{NULL} (the default),
determined to be the number of levels in \code{pl} or \code{x}.}

\item{palette}{Character; either a color palette from
\code{\link[grDevices:palettes]{grDevices::hcl.pals()}}, or the name of a palette function documented there
(e.g. \code{'rainbow()'}), or a vector of colors for \code{\link[grDevices:colorRamp]{grDevices::colorRamp()}} to
interpolate.}

\item{alpha, rev}{Parameters passed to \code{\link[grDevices:palettes]{grDevices::hcl.colors()}},
\code{\link[grDevices:colorRamp]{grDevices::colorRampPalette()}}.}

\item{...}{Additional parameters passed to \code{\link[base:plot]{base::plot()}}. Values passed to
\code{type} or \code{col} will be ignored with a message.}

\item{silent}{Logical; whether to silence messages.}

\item{object}{A \link{PersistenceLandscape} object.}
}
\description{
A \code{\link[base:plot]{base::plot()}} method for persistence landscape objects.

A \code{\link[methods:show]{methods::show()}} S4 method for persistence landscape objects,
used for \code{\link[base:print]{base::print()}}.
}
\examples{
# sample points
set.seed(650637L)
rpp <- tdaunif::sample_projective_plane(48L)

# compute persistence data, retaining parameters
pd <- as_persistence(ripserr::vietoris_rips(rpp, max_dim = 2L, threshold = 4))

# plot landscapes
par(mfrow = c(3L, 1L), mar = c(0, 2, 0, 2))
# palette name
plot(landscape(pd, degree = 0L, min_x = 0, max_x = 1.5, by = 0.01),
     palette = "Cork", lwd = 1)
# palette function name
plot(landscape(pd, degree = 1L, min_x = 0, max_x = 1.5, by = 0.01),
     palette = "topo.colors", lwd = 1, rev = TRUE)
# custom color ramp
plot(landscape(pd, degree = 2L, min_x = 0, max_x = 1.5, by = 0.01),
     palette = c("red", "green", "blue"), lwd = 1)
par(mfrow = c(1L, 1L), mar = c(5.1, 4.1, 4.1, 2.1))
# constructor
pl1 <- new(PersistenceLandscape,
           diagram = matrix(c(0,1, 0,2), nrow = 2L, ncol = 2L, byrow = TRUE),
           exact = TRUE,
           min_x = 0, max_x = 3,
           by = 0.1, max_y = 100)
summary(pl1)
pl2 <- new(PersistenceLandscape,
           diagram = matrix(c(0,1, 0,2), nrow = 2L, ncol = 2L, byrow = TRUE),
           exact = FALSE,
           min_x = -.25, max_x = 5,
           by = 0.1, max_y = 100)
summary(pl2)

# getters
pl1$getInternal()
pl1$toExact()
pl1$toDiscrete()
pl2$getInternal()
try(pl2$toExact())
pl2$toDiscrete()
}
